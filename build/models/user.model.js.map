{"version":3,"sources":["../../src/models/user.model.js"],"names":["mongoose","require","Schema","userSchema","firstname","type","String","required","gender","Number","birthday","Date","location","email","password","isAdmin","Boolean","photo","Array","answered","_id","selected","value","Types","ObjectId","ref","questions","votes","question","vote","timestamps","liked","user","rejected","likedme","module","exports","model"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\r\nconst Schema = mongoose.Schema;\r\n\r\nconst userSchema = new Schema(\r\n    {\r\n        firstname: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        gender: {\r\n            type: Number\r\n        },\r\n        birthday: {\r\n            type: Date\r\n        },\r\n        location: {\r\n            type: String\r\n        },\r\n        email: {\r\n            type: String,\r\n            required: true,\r\n            // unique: true\r\n        },\r\n        password: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        isAdmin: Boolean,\r\n\r\n        //\r\n        photo: Array,\r\n        answered: [{\r\n            _id: false,\r\n            selected: String,\r\n            value: { type: Schema.Types.ObjectId, ref: 'Question' },\r\n        }],\r\n        questions: [{ type: Schema.Types.ObjectId, ref: 'Question' }],\r\n        votes: [\r\n            {\r\n                type: new mongoose.Schema({\r\n                    _id: false,\r\n                    question: { type: Schema.Types.ObjectId, ref: 'Question' },\r\n                    vote: ['L', 'D']\r\n                }, { timestamps: true })\r\n            }\r\n        ],\r\n\r\n        //\r\n        liked: [{\r\n            type: new mongoose.Schema({\r\n                _id: false,\r\n                user: { type: Schema.Types.ObjectId, ref: 'User' },\r\n            }, { timestamps: true })\r\n        }],\r\n\r\n        rejected: [{\r\n            type: new mongoose.Schema({\r\n                _id: false,\r\n                user: { type: Schema.Types.ObjectId, ref: 'User' },\r\n            }, { timestamps: true })\r\n        }],\r\n\r\n        likedme: [{\r\n            type: new mongoose.Schema({\r\n                _id: false,\r\n                user: { type: Schema.Types.ObjectId, ref: 'User' },\r\n            }, { timestamps: true })\r\n        }],\r\n    },\r\n    {\r\n        timestamps: true\r\n    }\r\n);\r\n\r\nmodule.exports = mongoose.model('User', userSchema);"],"file":"user.model.js"}