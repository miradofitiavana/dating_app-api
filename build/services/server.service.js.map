{"version":3,"sources":["../../src/services/server.service.js"],"names":["express","require","bodyParser","app","config","port","server","apiRouter","schema","resolvers","ApolloServer","gql","cors","graphQLServer","typeDefs","formatError","err","console","log","message","status","applyMiddleware","path","use","json","exports","start","listen","process","exit"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,GAAG,GAAGH,OAAO,EAAnB;;AAEA,IAAMI,MAAM,GAAGH,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAMI,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAcD,IAA3B;;AAEA,IAAME,SAAS,GAAGN,OAAO,CAAC,aAAD,CAAzB;;AAEA,IAAMO,MAAM,GAAGP,OAAO,CAAC,qBAAD,CAAtB;;AACA,IAAMQ,SAAS,GAAGR,OAAO,CAAC,uBAAD,CAAzB;;eAC8BA,OAAO,CAAC,uBAAD,C;IAA7BS,Y,YAAAA,Y;IAAcC,G,YAAAA,G;;AACtB,IAAMC,IAAI,GAAGX,OAAO,CAAC,MAAD,CAApB;;AAEA,IAAMY,aAAa,GAAG,IAAIH,YAAJ,CAAiB;AACnCI,EAAAA,QAAQ,EAAEN,MADyB;AAEnCC,EAAAA,SAAS,EAATA,SAFmC;AAGnCM,EAAAA,WAAW,EAAE,qBAACC,GAAD,EAAS;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAQ;AAAEG,MAAAA,OAAO,EAAEH,GAAG,CAACG,OAAf;AAAwBC,MAAAA,MAAM,EAAEJ,GAAG,CAACI;AAApC,KAAR;AACH;AANkC,CAAjB,CAAtB;AASAP,aAAa,CAACQ,eAAd,CAA8B;AAAElB,EAAAA,GAAG,EAAHA,GAAF;AAAOmB,EAAAA,IAAI,EAAE;AAAb,CAA9B;AAEAnB,GAAG,CAACoB,GAAJ,CAAQrB,UAAU,CAACsB,IAAX,EAAR;AACArB,GAAG,CAACoB,GAAJ,CAAQX,IAAI,EAAZ;AAEAT,GAAG,CAACoB,GAAJ,CAAQ,SAAR,EAAmBhB,SAAnB,E,CAEA;AACA;AACA;;AACAJ,GAAG,CAACoB,GAAJ,CAAQ,SAAR,EAAmBvB,OAAO,UAAP,CAAe,QAAf,CAAnB;;AAIAyB,OAAO,CAACC,KAAR,GAAgB,YAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACAvB,EAAAA,GAAG,CAACwB,MAAJ,CAAWtB,IAAX,EAAiB,UAACW,GAAD,EAAS;AACtB,QAAIA,GAAJ,EAAS;AACLC,MAAAA,OAAO,CAACC,GAAR,mBAAuBF,GAAvB;AACAY,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAC,CAAd;AACH;;AACDZ,IAAAA,OAAO,CAACC,GAAR,mCAAuCb,IAAvC;AACH,GAND;AAOH,CAfD","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst app = express();\r\n\r\nconst config = require('./../configs');\r\nconst port = config.server.port;\r\n\r\nconst apiRouter = require('./../routes');\r\n\r\nconst schema = require('./../apollo/schemas');\r\nconst resolvers = require('./../apollo/resolvers');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst cors = require('cors');\r\n\r\nconst graphQLServer = new ApolloServer({\r\n    typeDefs: schema,\r\n    resolvers,\r\n    formatError: (err) => {\r\n        console.log(err);\r\n        return ({ message: err.message, status: err.status })\r\n    },\r\n});\r\n\r\ngraphQLServer.applyMiddleware({ app, path: '/graphql' });\r\n\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\napp.use('/api/v1', apiRouter);\r\n\r\n// const path = require('path');\r\n// app.use(express.static(path.join(__dirname, 'public')));\r\n// express.static('./../public');\r\napp.use('/public', express.static('public'))\r\n\r\n\r\n\r\nexports.start = () => {\r\n    // app.listen(port, '192.168.1.75', (err) => {\r\n    //     if (err) {\r\n    //         console.log(`Error : ${err}`);\r\n    //         process.exit(-1);\r\n    //     }\r\n    //     console.log(`App is running on  port ${port}`);\r\n    // });\r\n    app.listen(port, (err) => {\r\n        if (err) {\r\n            console.log(`Error : ${err}`);\r\n            process.exit(-1);\r\n        }\r\n        console.log(`App is running on  port ${port}`);\r\n    });\r\n}"],"file":"server.service.js"}